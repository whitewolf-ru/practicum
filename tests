
Чтобы начать работать с библиотекой Cypress, её нужно установить в проект. Это можно сделать с помощью одной команды:

npm install cypress --save-dev

Для запуска тестового окружения нужно вызвать исполняемый файл, который находится в node_modules/.bin/cypress:

./node_modules/.bin/cypress open 

Также запустить окружение можно с помощью npx или yarn:

npx cypress open

Для удобства вы можете создать специальную команду для запуска тестового окружения в файле package.json, к примеру:
"scripts": {
    "cypress:open": "./node_modules/.bin/cypress open",
  }, 

Запустить эту команду можно так:

npm run cypress:open

В случае, если у вас в проекте установлен eslint, в тестовых файлах он будет подсвечивать вызовы объектов и методов как неизвестные. Установите плагин eslint-plugin-cypress:

npm install eslint-plugin-cypress --save-dev

В директории cypress, которая была создана при первом запуске тестового окружения, создайте файл

.eslintrc.json

укажите плагин, который будет использоваться в этой директории, заодно можно добавить рекомендованный набор правил:

  {
    "plugins": [
      "cypress"
    ],
    "extends": [
      "plugin:cypress/recommended"
    ]
  }
   
При первом запуске тестового окружения библиотека создаёт в приложении директорию cypress с такой архитектурой:

cypress
   fixtures
   integration
      examples
   plugins
   support 

Нас интересует только директория integration: именно в ней Cypress по умолчанию ищет файлы тестов.

В директории integration есть поддиректория examples с примерами тестовых файлов. Сейчас все эти примеры для нас не важны и могут мешать при запуске тестов, поэтому их лучше удалить.
